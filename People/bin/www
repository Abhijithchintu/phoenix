#!/usr/bin/env node

var debug = require('debug')('people:server');
var http = require('http');
require('dotenv').config();
const { resolveAsyncConfigs } = require('config/async');
const config = require('config');

const vault = require("../external/vault");

var port = normalizePort(process.env.PORT || '3000');

let server;
const init = async () => {
  await vault.init().then(() => console.log("vault initialized"));
  await resolveAsyncConfigs(config).then(() => console.log("config initialized"));
  const app = require('../app');
  app.set('port', port);
  server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
init()
    .then(() => console.log("people server started successfully"))
    .catch((reason) => {console.log("people server failed to start with error:", reason)});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
